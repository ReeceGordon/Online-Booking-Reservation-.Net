@page "/StaffPanel"
@using Lotus.Shared
@using Lotus.Client.Shared.Components.StaffPanel
@using System.Net.Http
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using Lotus.Client.Shared.Tools
    <AuthorizeView Roles="Staff">
        <Authorized>

            <div class="container-fluid px-0">
                <div class="row mt-2 no-gutters " style="min-height: 98vh;min-width:100vw;">
                    <div class="rounded col-sm-1 row-height ml-2 " style="height:98vh; background:rgba(255, 255, 255, 0.82);border:solid black; overflow-y:auto;">
                        <Sidebar onSelected="SetWindow" />
                    </div>
                    @if (CurrentWindow == "Members" || CurrentWindow == "SelectedMember")
                    {
                        <div class="rounded col-sm-1 row-height ml-1 " style="background:rgba(255, 255, 255, 0.82);border:solid black; ">
                            <Members_Sidebar onSelected="SetMember" />
                        </div>
                    }
                    <div class=" rounded col-md  row-height ml-2 mr-2" style="background: rgba(255, 255, 255, 0.82); border: solid black;max-height:98vh;overflow:auto;">
                        @if (CurrentWindow == "Tips" || CurrentWindow == "Members")
                        {
                            <div class="NonSelectable" id="DisplayOptionMessage"><h3 style="">@TipMessage</h3></div>
                        }
                        @if (CurrentWindow == "About")
                        {
                            <About />
                        }
                        @if (CurrentWindow == "Settings")
                        {
                            <Settings Id="@Staff_Id" />
                        }
                        @if (CurrentWindow == "SelectedMember")
                        {
                            <Member StaffFullName="@StaffFullName" Id="@CurrentId" Name="@Name" Surname="@Surname" Email="@Email" Phone_Number="@Phone_number" Border="@Border" Color="@Color" />
                        }
                        @if (CurrentWindow == "Calendar")
                        {
                            <Calendar Id="@Staff_Id" />
                        }

                    </div>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            @if (true)
            {
                Aunothorized();
            }
        </NotAuthorized>
    </AuthorizeView>


@code{
    private string TipMessage = "Please select an option from the side menu on the left";
    private string CurrentWindow = "Tips";
    private string CurrentId;
    private string Email, Name, Surname, Notes, Phone_number, Border, Color, StaffFullName;
    private string CurrentUserID = "DEFAULT-ID";
    private string LastUserRegisteredID = "DEFAULT-LAST-ID";
    private string Staff_Id = "";

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    /// <summary>
    /// once the page is being initialized to get the logged in staff id
    /// load the staffs details and get the last registered user
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User;

        if (user.IsInRole("Staff"))
        {
        Staff_Id = await Http.GetStringAsync("api/Accounts/Grab_ID");
        StaffModel[] staff = await Http.GetJsonAsync<StaffModel[]>($"Staff/Get/{Staff_Id}");
        StaffFullName = staff[0].Name + " " + staff[0].Surname;
        LastUserRegisteredID = await Http.GetStringAsync("api/Accounts/GrabLast_ID");
        }

    }
    protected async Task GrabID() =>
        CurrentUserID = await Http.GetStringAsync("api/Accounts/Grab_ID");

    /// <summary>
    /// sets the window to be displayed
    /// </summary>
    /// <param name="Parameters"></param>
    void SetWindow(List<string> Parameters)
    {
        CurrentWindow = Parameters[0];
        if (Parameters.Count > 1)
        {
            TipMessage = Parameters[1];
        }

    }
    /// <summary>
    /// if aunothorized access is attempted to take the user to the index page
    /// </summary>
    void Aunothorized()
    {
        NavigationManager.NavigateTo("/");
    }
    /// <summary>
    /// used to show a particular member's details
    /// </summary>
    /// <param name="Parameters"></param>
    void SetMember(List<string> Parameters)
    {
        CurrentWindow = "SelectedMember";
        CurrentId = Parameters[0];
        Name = Parameters[1];
        Surname = Parameters[2];
        Notes = Parameters[3];
        Email = Parameters[4];
        Phone_number = Parameters[5];
        Border = Parameters[6];
        Color = Parameters[7];

    }

}