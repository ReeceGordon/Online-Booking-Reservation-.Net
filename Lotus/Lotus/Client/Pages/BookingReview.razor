@page "/BookingReview"
@using Lotus.Shared
@using Lotus.Client.Shared.Components.Home
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@using System.Net.Http
@using Lotus.Client.Shared.Tools
@using System.Globalization;
@if (!isLoading)
{
    @if (appointment.Count() != 0)
    {
        DateTime StartTime = DateTime.ParseExact(appointment[0].Start, "HH:mm", CultureInfo.InvariantCulture);
        DateTime EndTime = DateTime.ParseExact(appointment[0].End, "HH:mm", CultureInfo.InvariantCulture);
        <div style="background:rgba(255, 255, 255, 0.82);border:solid black;position: fixed;width:50vw;height:50vh; top: 50%;left: 50%;-webkit-transform: translate(-50%, -50%);transform: translate(-50%, -50%);">
            @if (Status == "none")
            {
                <img class="rounded d-block ml-auto mr-auto mt-4 mb-4" style="max-width:25vw;max-height:5vh" src="/StaticFiles/Logo.png" alt="Logo">
                <table align="center" style="text-align:left;">
                    <tr style="text-align:center;">
                        <td><h3 class="mt-3">Booking Information</h3></td>
                    </tr>
                    <tr>
                        <td><h5 class="mt-2">Customer Name: @appointment[0].Full_Name</h5></td>
                    </tr>
                    <tr>
                        <td><h5>Date: @appointment[0].App_Date.ToString("dddd MMM dd, yyyy")</h5></td>
                    </tr>
                    <tr>
                        <td><h5>Time: @StartTime.ToString("hh:mm tt") - @EndTime.ToString("hh:mm tt")</h5></td>
                    </tr>
                    <tr>
                        <td><h5>Appointment Type: @appointment[0].Type</h5></td>
                    </tr>
                    <tr style="text-align:center;">
                        <td><button class="btn btn-success w-100 mt-2" @onclick="Approve">Accept</button></td>
                    </tr>
                    <tr style="text-align:center;">
                        <td><button class="btn btn-danger w-100 mt-1" @onclick="Reject">Reject</button></td>
                    </tr>
                </table>
            }
            else
            {

                <table class="w-100" style="text-align:center;position: fixed;top: 50%;left: 50%;-webkit-transform: translate(-50%, -50%);transform: translate(-50%, -50%);">
                    @if (Status == "Approved")
                    {
                        <tr>
                            <td>
                                <i style="font-size:10rem;color:forestgreen;" class="fas fa-check-circle"></i>
                                <h3 class="mt-2">Appointment succesfully Approved</h3>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td>
                                <i style="font-size:10rem;color:darkred;" class="fas fa-times-circle"></i>
                                <h3 class="mt-2">Appointment succesfully Rejected</h3>
                            </td>
                        </tr>
                    }

                </table>
            }

        </div>
    }
    else
    {
        <div style="text-align:center;position: fixed;width:100%; top: 50%;left: 50%;-webkit-transform: translate(-50%, -50%);transform: translate(-50%, -50%);">
            <i class="far fa-frown" style="color:rgba(255, 255, 255, 0.82);font-size:20rem;"></i>
            <h1 class="display-1 mt-3" style="color:rgba(255, 255, 255, 0.82)">404</h1>
            <h2 class="mt-2" style="color:rgba(255, 255, 255, 0.50)">Page not found</h2>
            <h3 class="mt-2" style="color:rgba(255, 255, 255, 0.65)">The page you are looking for doesn't exist or another error occured.</h3>
            <h3 class="mt-2" style="color:rgba(255, 255, 255, 0.65)">Go back, or head over to <b><a style="color:rgba(255, 255, 255, 0.65);" href="/">@navigationManager.BaseUri</a></b> to choose a new direction.</h3>
        </div>
    }
}
@code {
    bool isLoading = true;
    AppointmentsModel[] appointment;
    SettingsModel[] Settings;
    string Id, StaffFullName, MemberEmail = "";
    string Status = "none";
    /// <summary>
    /// whilst the page is being initialized to get the query passed in the url and setup the appointment information
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        System.Uri uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);

        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("i", out var param1))
        {
            Id = param1.First();
            if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("n", out var param2))
            {
                StaffFullName = param2.First();
                Console.WriteLine(StaffFullName);
                appointment = await Http.GetJsonAsync<AppointmentsModel[]>($"Appointments/GetReview/{Id}");
                MembersModel[] member = await Http.GetJsonAsync<MembersModel[]>($"Members/Get/{appointment[0].Staff_Id}");
                MemberEmail = member[0].Email;
                Settings = await Http.GetJsonAsync<SettingsModel[]>("Settings");
                isLoading = false;
            }

        }

    }
    /// <summary>
    /// used to approve the appointment and send an email to the member that their appointment has been approved
    /// </summary>
    /// <returns></returns>
    private async Task Approve()
    {
        var data = new AppointmentsModel { Id = Convert.ToInt32(Id) };
        ResponseModel AproveResponse = await Http.PutJsonAsync<ResponseModel>("Appointments/Approve", data);
        if (AproveResponse.Status)
        {
            DateTime StartTime = DateTime.ParseExact(appointment[0].Start, "HH:mm", CultureInfo.InvariantCulture);
            DateTime EndTime = DateTime.ParseExact(appointment[0].End, "HH:mm", CultureInfo.InvariantCulture);
            string EmailBody = Lotus.Client.Properties.Resources.Email;


            EmailBody = EmailBody.Replace("[Title]", "Your Booking has just been approved!");
            EmailBody = EmailBody.Replace("[Header]", "Hope this email finds you well!");
            EmailBody = EmailBody.Replace("[Message]", "This Email is sent to you to let you know that your booking is Approved and we hope to see you soon close to us.");
            EmailBody = EmailBody.Replace("[Image]", "https://i.gyazo.com/4176dd05c2edc7ed1d4dcf1ad462bb36.png");
            EmailBody = EmailBody.Replace("[Footer]", "Booking Recap:<br /> Date: [Date]<br /> Time: [Time]<br /> Appointment Type: [Type]<br /> Staff Member: [Staff]");
            EmailBody = EmailBody.Replace("[Date]", appointment[0].App_Date.ToString("dddd MMM dd, yyyy"));
            EmailBody = EmailBody.Replace("[Time]", StartTime.ToString("hh:mm tt"));
            EmailBody = EmailBody.Replace("[Type]", appointment[0].Type);
            EmailBody = EmailBody.Replace("[Staff]", StaffFullName);
            EmailBody = EmailBody.Replace("[ClosingRemarks]", "Cheers,");
            EmailBody = EmailBody.Replace("[End]", Settings[0].Company_Name);
            var email = new EmailModel
            {
                Subject = "Your Booking has been Approved",
                To = MemberEmail,
                Body = EmailBody,
                HtmlBody = true
            };

            ResponseModel result = await Http.PostJsonAsync<ResponseModel>("Email", email);
            Status = "Approved";
        }


    }
    /// <summary>
    /// used to regect and appointment and to send an email that the appointment has been rejected
    /// </summary>
    /// <returns></returns>
    private async Task Reject()
    {
        await Http.DeleteAsync($"Appointments/{Id}");

        DateTime StartTime = DateTime.ParseExact(appointment[0].Start, "HH:mm", CultureInfo.InvariantCulture);
        DateTime EndTime = DateTime.ParseExact(appointment[0].End, "HH:mm", CultureInfo.InvariantCulture);
        string EmailBody = Lotus.Client.Properties.Resources.Email;



        EmailBody = EmailBody.Replace("[Title]", "Your Booking sadly has been rejected!");
        EmailBody = EmailBody.Replace("[Header]", "Hope this email finds you well!");
        EmailBody = EmailBody.Replace("[Message]", "This Email is sent to you to let you know that your booking has been rejected as the staff member can not see you please book again at a different date or time.");
        EmailBody = EmailBody.Replace("[Image]", "https://i.gyazo.com/ee65e1da6c0b32904252d994d5d3296d.jpg");
        EmailBody = EmailBody.Replace("[Footer]", "Rejected Booking Recap:<br /> Date: [Date]<br /> Time: [Time]<br /> Appointment Type: [Type]<br /> Staff Member: [Staff]");
        EmailBody = EmailBody.Replace("[Date]", appointment[0].App_Date.ToString("dddd MMM dd, yyyy"));
        EmailBody = EmailBody.Replace("[Time]", StartTime.ToString("hh:mm tt"));
        EmailBody = EmailBody.Replace("[Type]", appointment[0].Type);
        EmailBody = EmailBody.Replace("[Staff]", StaffFullName);
        EmailBody = EmailBody.Replace("[ClosingRemarks]", "Cheers,");
        EmailBody = EmailBody.Replace("[End]", Settings[0].Company_Name);
        var email = new EmailModel
        {
            Subject = "Your Booking has been Rejected",
            To = MemberEmail,
            Body = EmailBody,
            HtmlBody = true
        };

        ResponseModel result = await Http.PostJsonAsync<ResponseModel>("Email", email);
        Status = "Rejected";

    }
}
