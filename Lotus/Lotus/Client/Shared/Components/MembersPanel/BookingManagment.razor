@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System.Reflection;
@using System.IO
@using DataJuggler.Blazor.FileUpload
@using Lotus.Shared
@using Lotus.Shared.Identity
@using Lotus.Client.Shared.Tools
@using System.Drawing
@using System.Drawing.Imaging
@using System.Globalization;

@if (!isLoading)
{
    <div style="color:grey" class="row no-gutters">
        <div class="col-md-12" style="text-align:center;">
            <div class="row no-gutters">
                <div class="col-md-6 my-auto" style="text-align:left">
                    <table class="mt-1">
                        <tr>
                            <td><img class="rounded d-block ml-2" style="max-width:25vw;max-height:7vh;cursor:pointer" src="/StaticFiles/Logo.png" alt="Logo" @onclick='() => DisplayWindow("All")'></td>
                            <td><button class="btn btn-success ml-2" @onclick='() => GoTo("Booking")'>Book Now</button></td>
                            @if (!(string.IsNullOrEmpty(currentRole)))
                            {
                                if (currentRole == "Admin")
                                {
                                    <td><button class="btn btn-success ml-2" @onclick='() => GoToAdminPanel()'>Admin Panel</button></td>
                                    <td><button class="btn btn-success ml-2" @onclick='() => GoToStaffPanel()'>Staff Panel</button></td>
                                }
                            }

                        </tr>
                    </table>

                </div>
                <div class="col-md-6 my-auto" style="text-align:right;">
                    <div class="dropdown mt-2 mb-2 mr-3">
                        <button class="dropdown-toggle" type="button" id="dropdownMenu" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="border: none;background: transparent;outline: none;color: whitesmoke;">
                            Welcome, @MemberFullName
                        </button>
                        <div class="dropdown-menu dropdown-menu-right" aria-labelledby="dropdownMenu">
                            <button class="dropdown-item" type="button" @onclick='() => DisplayWindow("Details")'>View Profile</button>
                            <button class="dropdown-item" type="button" @onclick='() => DisplayWindow("Password")'>Change Password</button>
                            <button class="dropdown-item" type="button" @onclick="Logout">Log Out</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-1 no-gutters" style="min-height: 67vh;background:white;">
        <div class="col-1">

        </div>
        @if (CurrentWindow == "All")
        {


            <div class="col-md-10">
                <div class="row mt-1 no-gutters" style="min-height: 60vh;background:white;text-align:center">
                    <div class="col-4">
                        <h1 class="NonSelectable w-100">Past Bookings</h1>
                        <hr class="NonSelectable" />
                        <div style="max-height:60vh;overflow-y:auto;text-align:left">
                            @foreach (var app in MemberAppointments)
                            {
                                if (app.App_Date < DateNow && app.App_Date.ToString("dd/MM/yyyy") != DateNow.ToString("dd/MM/yyyy"))
                                {
                                    DateTime StartTime = DateTime.ParseExact(app.Start, "HH:mm", CultureInfo.InvariantCulture);
                                    DateTime EndTime = DateTime.ParseExact(app.End, "HH:mm", CultureInfo.InvariantCulture);
                                    <div class="NonSelectable rounded btn-danger mt-1" style="color:white;width:98%;margin:0 auto;cursor:pointer;">
                                        <span class="ml-1">@app.App_Date.ToString("dddd MMM dd, yyyy")</span>
                                        <br />
                                        <span class="ml-1">@StartTime.ToString("hh:mm tt")-@EndTime.ToString("hh:mm tt")</span>
                                        <br />
                                        <span class="ml-1">@app.Type</span>
                                        <br />
                                        <span class="ml-1">@StaffNames[app.Staff_Id]</span>
                                    </div>
                                }

                            }
                        </div>
                    </div>
                    <div class="col-4">
                        <h1 class="NonSelectable w-100">Today's Bookings</h1>
                        <hr class="NonSelectable" />
                        <div style="max-height:60vh;overflow-y:auto;text-align:left">
                            @foreach (var app in MemberAppointments)
                            {
                                if (app.App_Date.ToString("dd/MM/yyyy") == DateNow.ToString("dd/MM/yyyy"))
                                {
                                    if (Convert.ToInt32(app.Start.Split(":")[0] + app.Start.Split(":")[1]) < CurrentTime)
                                    {
                                        DateTime StartTime = DateTime.ParseExact(app.Start, "HH:mm", CultureInfo.InvariantCulture);
                                        DateTime EndTime = DateTime.ParseExact(app.End, "HH:mm", CultureInfo.InvariantCulture);
                                        <div class="NonSelectable rounded btn-danger mt-1" style="color:white;width:98%;margin:0 auto;cursor:pointer;">
                                            <span class="ml-1">@app.App_Date.ToString("dddd MMM dd, yyyy")</span>
                                            <br />
                                            <span class="ml-1">@StartTime.ToString("hh:mm tt")-@EndTime.ToString("hh:mm tt")</span>
                                            <br />
                                            <span class="ml-1">@app.Type</span>
                                            <br />
                                            <span class="ml-1">@StaffNames[app.Staff_Id]</span>
                                        </div>
                                    }
                                    else
                                    {
                                        string type = "btn-success";
                                        if (app.Status == "warning")
                                        {
                                            type = "btn-warning";
                                        }
                                        DateTime StartTime = DateTime.ParseExact(app.Start, "HH:mm", CultureInfo.InvariantCulture);
                                        DateTime EndTime = DateTime.ParseExact(app.End, "HH:mm", CultureInfo.InvariantCulture);
                                        <div @onclick="() => CloseOpenModal(app.Id)" class="NonSelectable rounded @type mt-1" style="color:white;width:98%;margin:0 auto;cursor:pointer;">
                                            <span class="ml-1">@app.App_Date.ToString("dddd MMM dd, yyyy")</span>
                                            <br />
                                            <span class="ml-1">@StartTime.ToString("hh:mm tt")-@EndTime.ToString("hh:mm tt")</span>
                                            <br />
                                            <span class="ml-1">@app.Type</span>
                                            <br />
                                            <span class="ml-1">@StaffNames[app.Staff_Id]</span>
                                        </div>
                                    }

                                }

                            }
                        </div>
                    </div>
                    <div class="col-4">
                        <h1 class="NonSelectable w-100">Future Bookings</h1>
                        <hr class="NonSelectable" />
                        <div style="max-height:60vh;overflow-y:auto;text-align:left">
                            @foreach (var app in MemberAppointments)
                            {
                                if (app.App_Date > DateNow && app.App_Date.ToString("dd/MM/yyyy") != DateNow.ToString("dd/MM/yyyy"))
                                {
                                    string type = "btn-success";
                                    if (app.Status == "Waiting")
                                    {
                                        type = "btn-warning";
                                    }
                                    DateTime StartTime = DateTime.ParseExact(app.Start, "HH:mm", CultureInfo.InvariantCulture);
                                    DateTime EndTime = DateTime.ParseExact(app.End, "HH:mm", CultureInfo.InvariantCulture);
                                    <div @onclick="() => CloseOpenModal(app.Id)" class="NonSelectable rounded @type mt-1" style="color: white; width: 98%; margin: 0 auto; cursor: pointer;">
                                        <span class="ml-1">@app.App_Date.ToString("dddd MMM dd, yyyy")</span>
                                        <br />
                                        <span class="ml-1">@StartTime.ToString("hh:mm tt")-@EndTime.ToString("hh:mm tt")</span>
                                        <br />
                                        <span class="ml-1">@app.Type</span>
                                        <br />
                                        <span class="ml-1">@StaffNames[app.Staff_Id]</span>
                                    </div>
                                }

                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        else if (CurrentWindow == "Password")
        {



            <div class="col-md-10">
                <div class="row mt-1 no-gutters" style="min-height: 60vh;background:white;text-align:center">
                    <div style="margin:0 auto">
                        <h1 class="display-1">Change Password</h1>

                        @if (pChangeResult != null)
                        {
                            @foreach (var error in pChangeResult.Errors)
                            {
                                if (error == "Password successfully changed.")
                                {
                                    <div class="alert alert-success" role="alert">
                                        <p>@error</p>
                                    </div>
                                }
                                else
                                {
                                    <div class="alert alert-danger" role="alert">
                                        <p>@error</p>
                                    </div>
                                }
                            }
                        }

                        <EditForm Model="changePasswordModel" OnValidSubmit="HandlePassChange">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group">
                                <div class="col-md-12">
                                    <InputText placeholder="Current Password" type="password" autocomplete="current-password" Id="password" Class="form-control form-control-lg" @bind-Value="changePasswordModel.OldPassword" />
                                    <ValidationMessage For="@(() => changePasswordModel.OldPassword)" />
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    <InputText placeholder="New Password" Id="password" type="password" autocomplete="new-password" Class="form-control form-control-lg" @bind-Value="changePasswordModel.NewPassword" />
                                    <ValidationMessage For="@(() => changePasswordModel.NewPassword)" />
                                </div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    <InputText placeholder="Confirm New Password" Id="password" type="password" autocomplete="new-password" Class="form-control form-control-lg" @bind-Value="changePasswordModel.ConfirmNewPassword" />
                                    <ValidationMessage For="@(() => changePasswordModel.ConfirmNewPassword)" />
                                </div>
                            </div>

                            <button class="btn btn-success FixedWidthLoginBoxButton mx-4" type="submit">Change Password</button>
                        </EditForm>
                    </div>
                </div>
            </div>

        }
        else if (CurrentWindow == "Details")
        {
            <div class="col-md-10">
                <div class="row mt-1 no-gutters" style="min-height: 60vh;background:white;text-align:center">
                    <div class="col-1">
                    </div>
                    <div class="col-10" style="max-height:70vh;overflow-y:auto">
                        <Member_Details ChangeWindow="DisplayWindow" MemberId="@MemberId" />
                    </div>
                    <div class="col-1">
                    </div>
                </div>
            </div>
        }
        <div class="col-1">
        </div>
    </div>

    @if (BookingView)
    {
        <div class="modal fade show" id="myModal" style="display:block;" aria-modal="true" role="dialog">
            <div class="vertical-alignment-helper">
                <div class="modal-dialog vertical-align-center" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title NonSelectable">@CurrDate.ToString("dddd MMM dd, yyyy") </h5>
                            <button type="button" style="outline:none" class="close NonSelectable" aria-label="Close" @onclick="() => CloseOpenModal(0)">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div>

                                @foreach (var app in MemberAppointments)
                                {
                                    if (app.Id == @CurrentAppointment)
                                    {
                                        DateTime Start = DateTime.ParseExact(app.Start, "HH:mm", CultureInfo.InvariantCulture);
                                        string statusColor = "green";
                                        if (app.Status == "Waiting")
                                        {
                                            statusColor = "#bfaf00";
                                        }
                                        <table>
                                            <tr>
                                                <td>Type: </td>
                                                <td class="ml-1"> @app.Type</td>
                                            </tr>
                                            <tr>
                                                <td>Name: </td>
                                                <td class="ml-1">@StaffNames[app.Staff_Id]</td>
                                            </tr>
                                            <tr>
                                                <td>Email: </td>
                                                <td class="ml-1">@StaffEmails[app.Staff_Id]</td>
                                            </tr>
                                            <tr>
                                                <td>Phone Number: </td>
                                                <td class="ml-1">@StaffNumbers[app.Staff_Id]</td>
                                            </tr>
                                            <tr>
                                                <td>Status: </td>
                                                <td class="ml-1"> <span style="color: @statusColor;">@app.Status</span></td>
                                            </tr>
                                            <tr>
                                                <td>Date: </td>
                                                <td class="ml-1">
                                                    @app.App_Date.ToString("dddd MMM dd, yyyy")
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>Starts At: </td>
                                                <td class="ml-1"><span>@Start.ToString("hh:mm tt")</span></td>
                                            </tr>
                                        </table>
                                        <table class="justify-content-center text-center w-100">
                                            <tr>
                                                <td>
                                                    <button class="btn btn-danger mt-1 w-75" @onclick="() => Delete(app.Id,app.App_Date,app.Start,app.Type,StaffEmails[app.Staff_Id])">Cancel Appointment</button>
                                                </td>
                                            </tr>

                                        </table>

                                    }

                                }
                            </div>



                        </div>
                        <div class="modal-footer">

                            <button type="button" class="btn btn-secondary" @onclick="() => CloseOpenModal(0)">Close</button>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {

    //Cascading parameter to determine user role within a Component that isn't represented in its own page.
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string currentRole { get; set; }
    private RegisterResult pChangeResult { get; set; }

    private ChangePasswordModel changePasswordModel = new ChangePasswordModel();

    private async Task HandlePassChange()
    {
        pChangeResult = await Http.PostJsonAsync<RegisterResult>("api/accounts/ChangePassword", changePasswordModel);

        if (pChangeResult.Successful)
        {
            changePasswordModel.OldPassword = "";
            changePasswordModel.NewPassword = "";
            changePasswordModel.ConfirmNewPassword = "";
            Console.WriteLine("Password Successfully Changed.");
        }
        else
        {
            Console.WriteLine("Password Couldn't be changed!");
        }
    }

    bool BookingView = false;
    DateTime CurrDate, CurrTime;
    [Parameter] public EventCallback<string> ChangeWindow { get; set; }
    [Parameter] public string MemberId { get; set; }
    string MemberFullName, StaffPhone = "";
    int CurrentAppointment = 0;
    string CurrentPassword, NewPassword, ConfirmPassword, ErrorMsg = "";
    bool ChangePassword = false;
    string currEmail;
    int CurrentTime = 0;
    string CurrentWindow = "All";
    DateTime DateNow = DateTime.Now;
    ServiceModel[] Services;
    SettingsModel[] Settings;
    StaffModel[] Staff;
    AppointmentsModel[] MemberAppointments;
    AppointmentsModel[] StaffAppointments;
    MembersModel[] Member;
    Dictionary<string, string> StaffEmails = new Dictionary<string, string>();
    Dictionary<string, string> StaffNames = new Dictionary<string, string>();
    Dictionary<string, string> StaffNumbers = new Dictionary<string, string>();
    string[] Days = { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
    bool isLoading = true;
    /// <summary>
    /// when the page is being initialized the members details is loaded aswell as the staff members and all the appointments of that member
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        CurrentTime = Convert.ToInt32(DateNow.ToString("HHmm"));
        Member = await Http.GetJsonAsync<MembersModel[]>($"Members/Get/{MemberId}");
        MemberFullName = Member[0].Name + " " + Member[0].Surname;
        Staff = await Http.GetJsonAsync<StaffModel[]>("Staff");
        Console.WriteLine(CurrentTime);

        Settings = await Http.GetJsonAsync<SettingsModel[]>("Settings");
        MemberAppointments = await Http.GetJsonAsync<AppointmentsModel[]>($"Appointments/GetAllByMemberID/{MemberId}");
        SetDictionaries();

        //Grab current user data and determine role user is within.
        var user = (await authenticationStateTask).User;

        if (user.IsInRole("Admin"))
        {
            currentRole = "Admin";
        }
        else if (user.IsInRole("Staff"))
        {
            currentRole = "Staff";
        }
        else if (user.IsInRole("User"))
        {
            currentRole = "User";
        }
        else
        {

        }
    }
    //goes to the password change fuctionallity for the user to change their password
    private void DisplayWindow(string Window)
    {
        CurrentWindow = Window;
    }
    /// <summary>
    /// used to open or close the booking view modal
    /// </summary>
    private void CloseOpenModal(int id)
    {
        if (BookingView)
        {
            BookingView = false;
        }
        else
        {
            CurrentAppointment = id;
            BookingView = true;
        }
    }
    /// <summary>
    /// logs out the user
    /// </summary>
    private void Logout()
    {
        NavigationManager.NavigateTo(uri: "/logout");
    }

    /// <summary>
    /// Navigate user to AdminPanel
    /// </summary>
    private void GoToAdminPanel()
    {
        NavigationManager.NavigateTo(uri: "/AdminPanel");
    }

    /// <summary>
    /// Navigate user to StaffPanel
    /// </summary>
    private void GoToStaffPanel()
    {
        NavigationManager.NavigateTo(uri: "/StaffPanel");
    }


    /// <summary>
    /// goes to a page
    /// </summary>
    /// <param name="Destination">the page to go to</param>
    private void GoTo(string Destination)
    {
        ChangeWindow.InvokeAsync(Destination);
    }
    /// <summary>
    /// creates dictionaries for the staff emails and names
    /// </summary>
    private void SetDictionaries()
    {
        foreach (var staff in Staff)
        {
            StaffEmails.Add(staff.Staff_Id, staff.Email);
            StaffNames.Add(staff.Staff_Id, staff.Name + " " + staff.Surname);
            StaffNumbers.Add(staff.Staff_Id, staff.Phone_Number.ToString());
        }
        isLoading = false;
    }
    /// <summary>
    /// deletes the appointment from the database and lets the staff member know an appointment
    /// has been deleted
    /// </summary>
    /// <param name="id">id of the appointment to be deleted</param>
    /// <returns></returns>
    private async Task Delete(int id, DateTime date, string time, string type, string StaffEmail)
    {
        DateTime Start = DateTime.ParseExact(time, "HH:mm", CultureInfo.InvariantCulture);
        await Http.DeleteAsync($"Appointments/{id}");
        MemberAppointments = await Http.GetJsonAsync<AppointmentsModel[]>($"Appointments/GetAllByMemberID/{MemberId}");

        string EmailBody = Lotus.Client.Properties.Resources.Email;
        EmailBody = EmailBody.Replace("[Title]", "One of your Bookings sadly has been cancelled!");
        EmailBody = EmailBody.Replace("[Header]", "Hope this email finds you well!");
        EmailBody = EmailBody.Replace("[Message]", "This Email is sent to you to let you know that one of your booking has been cancelled.");
        EmailBody = EmailBody.Replace("[Image]", "https://i.gyazo.com/ee65e1da6c0b32904252d994d5d3296d.jpg");
        EmailBody = EmailBody.Replace("[Footer]", "Cancelled Booking Recap:<br /> Date: [Date]<br /> Time: [Time]<br /> Appointment Type: [Type]<br /> Member Name: [Name]");
        EmailBody = EmailBody.Replace("[Date]", date.ToString("dddd MMM dd, yyyy"));
        EmailBody = EmailBody.Replace("[Time]", Start.ToString("hh:mm tt"));
        EmailBody = EmailBody.Replace("[Type]", type);
        EmailBody = EmailBody.Replace("[Name]", MemberFullName);
        EmailBody = EmailBody.Replace("[ClosingRemarks]", "Cheers,");
        EmailBody = EmailBody.Replace("[End]", Settings[0].Company_Name);
        var email = new EmailModel
        {
            Subject = "A Booking has been cancelled",
            To = StaffEmail,
            Body = EmailBody,
            HtmlBody = true
        };

        ResponseModel result = await Http.PostJsonAsync<ResponseModel>("Email", email);
        CloseOpenModal(0);
    }

}
