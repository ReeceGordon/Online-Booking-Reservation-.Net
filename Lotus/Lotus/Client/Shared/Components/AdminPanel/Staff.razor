@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System.IO
@using DataJuggler.Blazor.FileUpload
@using Lotus.Shared
@using Lotus.Shared.Identity
@using Lotus.Client.Shared.Tools
@using System.Drawing
@using System.Drawing.Imaging


@if (!isLoading)
{


    <div class="mt-lg-5" style="margin: 0 auto;width:50vw;">
        <table class="mt-lg-5" style="margin: 0 auto; justify-content :center;text-align:center">
            <tr>
                <td colspan="2"><img class="rounded-circle mb-4 NonSelectable" style="border: solid black 1px; height:200px;width:200px;" src="/StaticFiles/Staff/@Image" /></td>
            </tr>
            <tr>
                <td style="margin-top:3rem;" class="NonSelectable">Name: </td>
                <td><input style="width:400px;" value="@Name" readonly /></td>
            </tr>
            <tr>
                <td class="NonSelectable">Surname: </td>
                <td><input style="width:400px;margin-top:3rem;" value="@Surname" readonly /></td>
            </tr>
            <tr>
                <td style="margin-top:3rem;" class="NonSelectable">Email: </td>
                <td><input style="width:400px;margin-top:3rem;" value="@Email" readonly /><button @onclick="ShowEmailModal" class="btn btn-success text-white ml-1"><i class="fas fa-envelope"></i></button></td>
            </tr>
            <tr>
                <td style="margin-top:3rem;" class="NonSelectable">Phone Number: </td>
                <td><input style="width:400px;margin-top:3rem;" value="@Phone_Number" readonly /></td>
            </tr>
            <tr>
                <td style="margin-top:3rem;" class="NonSelectable">Details: </td>
                <td><textarea style="width:400px;margin-top:3rem;resize:none" cols="40" rows="5" @bind="Details"></textarea></td>
            </tr>
            <tr>
                <td colspan="2"><button class="btn btn-success mt-2 w-100" @onclick="Save">Update</button></td>
            </tr>
            <tr>
                <td colspan="2"><button class="btn btn-danger mt-2 w-100" @onclick="Delete">Remove</button></td>
            </tr>
        </table>
    </div>
    @if (EmailModal)
    {
        <div class="modal fade show" id="myModal" style="display:block;" aria-modal="true" role="dialog">
            <div class="vertical-alignment-helper" style="margin-left: 10vw;">
                <div class="modal-dialog vertical-align-center" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title NonSelectable"></h5>
                            <button type="button" style="outline:none" class="close NonSelectable" aria-label="Close" @onclick="CloseEmailModal">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">

                            <input @bind="Subject" placeholder="Subject" style="width:100%;" />
                            <br />
                            <textarea class="mt-2" cols="50" rows="10" style="width:100%;resize:none;" placeholder="Message" @bind="Body"></textarea>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseEmailModal">Cancel</button>

                            <button type="button" class="btn btn-success" @onclick="SendEmail">Send</button>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    bool isLoading = true;
    [Parameter] public EventCallback<List<string>> onChangeWindow { get; set; }
    [Parameter] public EventCallback<List<string>> FilterStaff { get; set; }
    [Parameter] public string Id { get; set; }
    [Parameter] public string Name { get; set; }
    [Parameter] public string Surname { get; set; }
    [Parameter] public string Email { get; set; }
    [Parameter] public string Phone_Number { get; set; }
    [Parameter] public string Image { get; set; }
    private bool EmailModal = false;
    private string Subject, Body, errorMessage, Details;
    /// <summary>
    /// when component is initialized to load the staff details
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        StaffModel[] staff = await Http.GetJsonAsync<StaffModel[]>($"Staff/Get/{Id}");
        Details = staff[0].Details;
        isLoading = false;
    }
    private async Task Delete()
    {
        await Http.DeleteAsync($"Staff/{Id}");
        await Http.DeleteAsync($"WorkingHours/{Id}");
        await Http.DeleteAsync($"Upload/{Image}");
        var result = await Http.PostJsonAsync<RegisterResult>("api/accounts/StaffToUser", Id); //Changes staff to a user.

        if (result.Successful)
        {
            Console.WriteLine("Staff successfully converted to User.");
        }

        Search();
        ChangeWindow();
    }
    /// <summary>
    /// opens the email modal
    /// </summary>
    private void ShowEmailModal()
    {
        EmailModal = true;
    }
    /// <summary>
    /// closes the email modal
    /// </summary>
    private void CloseEmailModal()
    {
        EmailModal = false;
    }
    /// <summary>
    /// changes the window to add a new staff member
    /// </summary>
    private void ChangeWindow()
    {
        List<string> Parameters = new List<string>();
        Parameters.Clear();
        Parameters.Add("Staff");
        Parameters.Add("Please select a staff member from the list on the left hand side");
        onChangeWindow.InvokeAsync(Parameters);
    }
    /// <summary>
    /// filters the members based on the filter
    /// </summary>
    private void Search()
    {
        List<string> Parameters = new List<string>();
        Parameters.Add("");
        FilterStaff.InvokeAsync(Parameters);


    }
    /// <summary>
    /// save the chnages made to the staff details
    /// </summary>
    /// <returns></returns>
    private async Task Save()
    {
        StaffModel staff = new StaffModel
        {
            Staff_Id = Id,
            Name = Name,
            Surname = Surname,
            Email = Email,
            Phone_Number = Convert.ToInt64(Phone_Number),
            Details = Details,
            Image = Image

        };

        await Http.PutJsonAsync("Staff", staff);
    }
    /// <summary>
    /// sends an email to the staff using the subject and message chosen by the admin
    /// </summary>
    /// <returns></returns>
    private async Task SendEmail()
    {
        if (Subject != "" && Body != "")
        {

            SettingsModel[] settings = await Http.GetJsonAsync<SettingsModel[]>("Settings");
            //gets the email template from the resources
            string EmailBody = Lotus.Client.Properties.Resources.Email;

            EmailBody = EmailBody.Replace("[Title]", "Dear " + Name + " " + Surname + ",");
            EmailBody = EmailBody.Replace("[Header]", "Hope this email finds you well!");
            EmailBody = EmailBody.Replace("[Message]", Body);
            EmailBody = EmailBody.Replace("[Image]", "https://i.gyazo.com/f51f8725a57053347218537954c0954b.jpg");
            EmailBody = EmailBody.Replace("[Footer]", "Contact Details:<br /> Phone Number: [Phone]<br /> Email: [Email]<br /> Address: [Address]");
            EmailBody = EmailBody.Replace("[Phone]", settings[0].Phone_Number.ToString());
            EmailBody = EmailBody.Replace("[Email]", settings[0].Email);
            EmailBody = EmailBody.Replace("[Address]", settings[0].Address);


            EmailBody = EmailBody.Replace("[ClosingRemarks]", "Cheers,");
            EmailBody = EmailBody.Replace("[End]", settings[0].Company_Name);
            var email = new EmailModel
            {
                Subject = Subject,
                To = Email,
                Body = EmailBody,
                HtmlBody = true
            };

            ResponseModel result = await Http.PostJsonAsync<ResponseModel>("Email", email);
            CloseEmailModal();
            Subject = "";
            Body = "";
        }
        else
        {
            errorMessage = "Email must hava a subject and a message";
        }
    }
}
